// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConditionTypeEnum string

const (
	ConditionTypeEnumE    ConditionTypeEnum = "e"
	ConditionTypeEnumHv   ConditionTypeEnum = "hv"
	ConditionTypeEnumEq   ConditionTypeEnum = "eq"
	ConditionTypeEnumNeq  ConditionTypeEnum = "neq"
	ConditionTypeEnumPx   ConditionTypeEnum = "px"
	ConditionTypeEnumNpx  ConditionTypeEnum = "npx"
	ConditionTypeEnumSx   ConditionTypeEnum = "sx"
	ConditionTypeEnumNsx  ConditionTypeEnum = "nsx"
	ConditionTypeEnumIn   ConditionTypeEnum = "in"
	ConditionTypeEnumNin  ConditionTypeEnum = "nin"
	ConditionTypeEnumRgx  ConditionTypeEnum = "rgx"
	ConditionTypeEnumNrgx ConditionTypeEnum = "nrgx"
)

func (e ConditionTypeEnum) ToPointer() *ConditionTypeEnum {
	return &e
}

func (e *ConditionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "e":
		fallthrough
	case "hv":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "px":
		fallthrough
	case "npx":
		fallthrough
	case "sx":
		fallthrough
	case "nsx":
		fallthrough
	case "in":
		fallthrough
	case "nin":
		fallthrough
	case "rgx":
		fallthrough
	case "nrgx":
		*e = ConditionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionTypeEnum: %v", v)
	}
}
