// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ConditionParameterType string

const (
	ConditionParameterTypeStr     ConditionParameterType = "str"
	ConditionParameterTypeBoolean ConditionParameterType = "boolean"
	ConditionParameterTypeInteger ConditionParameterType = "integer"
)

type ConditionParameter struct {
	Str     *string
	Boolean *bool
	Integer *int64

	Type ConditionParameterType
}

func CreateConditionParameterStr(str string) ConditionParameter {
	typ := ConditionParameterTypeStr

	return ConditionParameter{
		Str:  &str,
		Type: typ,
	}
}

func CreateConditionParameterBoolean(boolean bool) ConditionParameter {
	typ := ConditionParameterTypeBoolean

	return ConditionParameter{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateConditionParameterInteger(integer int64) ConditionParameter {
	typ := ConditionParameterTypeInteger

	return ConditionParameter{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *ConditionParameter) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = ConditionParameterTypeStr
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = ConditionParameterTypeBoolean
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = ConditionParameterTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConditionParameter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}
