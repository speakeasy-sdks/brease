// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConditionType string

const (
	ConditionTypeE    ConditionType = "e"
	ConditionTypeHv   ConditionType = "hv"
	ConditionTypeEq   ConditionType = "eq"
	ConditionTypeNeq  ConditionType = "neq"
	ConditionTypePx   ConditionType = "px"
	ConditionTypeNpx  ConditionType = "npx"
	ConditionTypeSx   ConditionType = "sx"
	ConditionTypeNsx  ConditionType = "nsx"
	ConditionTypeIn   ConditionType = "in"
	ConditionTypeNin  ConditionType = "nin"
	ConditionTypeRgx  ConditionType = "rgx"
	ConditionTypeNrgx ConditionType = "nrgx"
)

func (e ConditionType) ToPointer() *ConditionType {
	return &e
}

func (e *ConditionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "e":
		fallthrough
	case "hv":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "px":
		fallthrough
	case "npx":
		fallthrough
	case "sx":
		fallthrough
	case "nsx":
		fallthrough
	case "in":
		fallthrough
	case "nin":
		fallthrough
	case "rgx":
		fallthrough
	case "nrgx":
		*e = ConditionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConditionType: %v", v)
	}
}
