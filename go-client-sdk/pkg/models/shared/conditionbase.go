// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ConditionBase2 struct {
	Ref *ConditionBaseRef `json:"ref,omitempty"`
}

type ConditionBaseType string

const (
	ConditionBaseTypeConditionBaseKey ConditionBaseType = "ConditionBaseKey"
	ConditionBaseTypeConditionBase2   ConditionBaseType = "ConditionBase_2"
)

type ConditionBase struct {
	ConditionBaseKey *ConditionBaseKey
	ConditionBase2   *ConditionBase2

	Type ConditionBaseType
}

func CreateConditionBaseConditionBaseKey(conditionBaseKey ConditionBaseKey) ConditionBase {
	typ := ConditionBaseTypeConditionBaseKey

	return ConditionBase{
		ConditionBaseKey: &conditionBaseKey,
		Type:             typ,
	}
}

func CreateConditionBaseConditionBase2(conditionBase2 ConditionBase2) ConditionBase {
	typ := ConditionBaseTypeConditionBase2

	return ConditionBase{
		ConditionBase2: &conditionBase2,
		Type:           typ,
	}
}

func (u *ConditionBase) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	conditionBaseKey := new(ConditionBaseKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&conditionBaseKey); err == nil {
		u.ConditionBaseKey = conditionBaseKey
		u.Type = ConditionBaseTypeConditionBaseKey
		return nil
	}

	conditionBase2 := new(ConditionBase2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&conditionBase2); err == nil {
		u.ConditionBase2 = conditionBase2
		u.Type = ConditionBaseTypeConditionBase2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConditionBase) MarshalJSON() ([]byte, error) {
	if u.ConditionBaseKey != nil {
		return json.Marshal(u.ConditionBaseKey)
	}

	if u.ConditionBase2 != nil {
		return json.Marshal(u.ConditionBase2)
	}

	return nil, nil
}
