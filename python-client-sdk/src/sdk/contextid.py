"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ContextID:
    r"""Rule domain context"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def add_rule(self, request: operations.AddRuleRequest, security: operations.AddRuleSecurity) -> operations.AddRuleResponse:
        r"""Adds a new rule to the context"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddRuleRequest, base_url, '/{contextID}/rules/add', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_rule_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIAddRuleResponse])
                res.api_add_rule_response = out

        return res

    
    def evaluate_rules(self, request: operations.EvaluateRulesRequest, security: operations.EvaluateRulesSecurity) -> operations.EvaluateRulesResponse:
        r"""Evaluate rules within a context on the provided object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EvaluateRulesRequest, base_url, '/{contextID}/evaluate', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "evaluate_rules_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EvaluateRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIEvaluateRulesResponse])
                res.api_evaluate_rules_response = out

        return res

    
    def get_all_rules(self, request: operations.GetAllRulesRequest, security: operations.GetAllRulesSecurity) -> operations.GetAllRulesResponse:
        r"""Returns all rules with the context"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllRulesRequest, base_url, '/{contextID}/rules', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIAllRulesResponse])
                res.api_all_rules_response = out

        return res

    
    def remove_rule(self, request: operations.RemoveRuleRequest, security: operations.RemoveRuleSecurity) -> operations.RemoveRuleResponse:
        r"""Removes a rule from the context"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveRuleRequest, base_url, '/{contextID}/rules/{id}', request)
        headers = {}
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def replace_rule(self, request: operations.ReplaceRuleRequest, security: operations.ReplaceRuleSecurity) -> operations.ReplaceRuleResponse:
        r"""Replaces an existing rule within the context"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplaceRuleRequest, base_url, '/{contextID}/rules/{id}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "replace_rule_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplaceRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIReplaceRuleResponse])
                res.api_replace_rule_response = out

        return res

    